<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[takeradi]]></title>
  <subtitle><![CDATA[takeradi]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://takeradi.github.io/"/>
  <updated>2015-12-17T05:48:33.000Z</updated>
  <id>http://takeradi.github.io/</id>
  
  <author>
    <name><![CDATA[takeradi]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Javascript - Closures]]></title>
    <link href="http://takeradi.github.io/2015/12/11/Javascript-101-Closures/"/>
    <id>http://takeradi.github.io/2015/12/11/Javascript-101-Closures/</id>
    <published>2015-12-11T14:16:01.000Z</published>
    <updated>2015-12-17T05:48:33.000Z</updated>
    <content type="html"><![CDATA[<p>There are a plethora of articles, tutorials and courses on Javascript and I am pretty sure that most of them have been written by amazing web developers who have a vast amount of knowledge on this subject. I plan on writing this <a href="http://takeradi.github.io/categories/Javascript/">Javascript</a> series with a two-fold reason in mind:</p>
<ol>
<li>Check my understanding on Javascript</li>
<li>Explain the concepts in this series in a way that I feel is easy to understand</li>
</ol>
<p>Before I start, I want to mention that the I find the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="external">MDN documentation</a> to be very useful in understanding most of the concepts. I am going to link the MDN documentation wherever possible to help you easily find additional information on the topics that I plan to cover.</p>
<p>I am going to start this series off with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures" target="_blank" rel="external">Closures</a> but to understand closure, one must have a good understanding of <a href="https://msdn.microsoft.com/en-us/library/bzt2dkta.aspx" target="_blank" rel="external">Variable Scope</a> in Javascript. The important thing to remember about Variable Scope is that Javascript DOES NOT have <code>block-level</code> scope. Javascript has <code>function-level</code> scope (Remembering this alone can save you from so much pain). As long as you understand that, this article should be quite easy to understand.<br><a id="more"></a></p>
<h1 id="What_the_heck_are_Closure?">What the heck are Closure?</h1><p>Imagine the following scenario - You have an inner function which tries to access the local variables of its outer function. If this inner function, which has access to the outer functions variables, is made accessible outside of the outer function, a closure is formed.</p>
<p>Confused yet? Let’s try to grasp this concept with the help of an example.</p>
<h1 id="Closures_in_Action">Closures in Action</h1><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">incrementCounter</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="keyword">var</span> counter=<span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">increment</span><span class="params">()</span></span>&#123;</span><br><span class="line">   counter++;</span><br><span class="line">   <span class="keyword">return</span> counter;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> increment;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> add1 = incrementCounter();</span><br><span class="line"></span><br><span class="line">alert(add1()); <span class="comment">//alerts 1</span></span><br><span class="line">alert(add1()); <span class="comment">//alerts 2</span></span><br><span class="line">alert(add1()); <span class="comment">//alerts 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//counter is now 3</span></span><br></pre></td></tr></table></figure>
<p>If you notice carefully, you will see 3 things over here:</p>
<ol>
<li>The inner function - <code>increment</code> has access to the outer function’s local variable - <code>counter</code></li>
<li>The inner function is returned when the outer function - <code>incrementCounter</code> is called, making it accessible outside of the outer function - <code>incrementCounter</code></li>
<li>When the inner function is called from outside of the outer function, it remembers the variables (<code>counter</code> in this case) that it had access to while it was created. Hence the value that you get when calling this inner function - <code>increment</code> or <code>add1</code> is 1 greater than the previous call.</li>
</ol>
<p>Hope that clears the main concept.</p>
<h1 id="Practical_Examples_of_Closures">Practical Examples of Closures</h1><p>You will see many theoretical examples being thrown around to understand the concept of closures. But when do we actually use Closures?</p>
<p>You will find this <a href="http://stackoverflow.com/questions/2728278/what-is-a-practical-use-for-a-closure-in-javascript" target="_blank" rel="external">Stackoverflow question</a> to be very useful for this.</p>
<p>The example that I really like is this one:</p>
<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">// Private variable</span></span><br><span class="line">	<span class="keyword">var</span> name = <span class="string">"Taker"</span>;</span><br><span class="line">	<span class="keyword">return</span> &#123;</span><br><span class="line">		getName : <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span><br><span class="line">			<span class="keyword">return</span> name;</span><br><span class="line">		&#125;,</span><br><span class="line">		setName : <span class="function"><span class="keyword">function</span> <span class="params">(newName)</span> </span>&#123;</span><br><span class="line">			name = newName;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;();</span><br><span class="line">alert(person.name); <span class="comment">// Undefined</span></span><br><span class="line">alert(person.getName()); <span class="comment">// "Taker"</span></span><br><span class="line">person.setName(<span class="string">"Takeradi"</span>);</span><br><span class="line">alert(person.getName()); <span class="comment">// "Takeradi"</span></span><br></pre></td></tr></table></figure>
<p>This is actually the <a href="http://yuiblog.com/blog/2007/06/12/module-pattern/" target="_blank" rel="external">Javascript Module Pattern</a>. In this example, you cannot access the variable <code>name</code> directly. The only way that it can be interacted with is the two functions <code>getName()</code> and <code>setName()</code>. You alone decide what IS and IS NOT accessible to everyone. Remember OOP anyone?</p>
<p>And that’s about it! I hope this article helps you understand what Javascript Closures are. As always, the MDN documentation that I have linked above is an amazing read.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are a plethora of articles, tutorials and courses on Javascript and I am pretty sure that most of them have been written by amazing web developers who have a vast amount of knowledge on this subject. I plan on writing this <a href="http://takeradi.github.io/categories/Javascript/">Javascript</a> series with a two-fold reason in mind:</p>
<ol>
<li>Check my understanding on Javascript</li>
<li>Explain the concepts in this series in a way that I feel is easy to understand</li>
</ol>
<p>Before I start, I want to mention that the I find the <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">MDN documentation</a> to be very useful in understanding most of the concepts. I am going to link the MDN documentation wherever possible to help you easily find additional information on the topics that I plan to cover.</p>
<p>I am going to start this series off with <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures">Closures</a> but to understand closure, one must have a good understanding of <a href="https://msdn.microsoft.com/en-us/library/bzt2dkta.aspx">Variable Scope</a> in Javascript. The important thing to remember about Variable Scope is that Javascript DOES NOT have <code>block-level</code> scope. Javascript has <code>function-level</code> scope (Remembering this alone can save you from so much pain). As long as you understand that, this article should be quite easy to understand.<br>]]>
    
    </summary>
    
      <category term="closures" scheme="http://takeradi.github.io/tags/closures/"/>
    
      <category term="javascript" scheme="http://takeradi.github.io/tags/javascript/"/>
    
      <category term="Javascript" scheme="http://takeradi.github.io/categories/Javascript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Pimp out your terminal]]></title>
    <link href="http://takeradi.github.io/2015/12/06/Pimp-your-terminal/"/>
    <id>http://takeradi.github.io/2015/12/06/Pimp-your-terminal/</id>
    <published>2015-12-06T18:50:47.000Z</published>
    <updated>2015-12-06T19:20:50.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/images/12062015/Pimped_Out_Terminal.png" alt="Pimp out your terminal"><br><a id="more"></a><br>Your bare bones - out of the box terminal is good. It does what it is supposed to do. But you can pimp it out to look like the one that you see above in just a few steps! This upgrade brings a lot of extra features and displays very useful Git info and it’s surprisingly simple to achieve. All you have to do is these 3 things:</p>
<ol>
<li>Install <a href="https://www.iterm2.com/" target="_blank" rel="external">iTerm</a></li>
<li>Install <a href="http://ohmyz.sh/" target="_blank" rel="external">ZSH</a></li>
<li>Install a <a href="https://github.com/powerline/fonts" target="_blank" rel="external">powerline font</a> and this awesome <a href="https://github.com/wesbos/Cobalt2-iterm" target="_blank" rel="external">theme</a>.</li>
</ol>
<p>To learn more, check out this <a href="https://www.youtube.com/watch?v=rl7PzPAZDyY&amp;list=PLu8EoSxDXHP7tXPJp5ZmUpuT7sFvrswzf" target="_blank" rel="external">YouTube playlist</a> by <a href="https://www.youtube.com/user/wesbos" target="_blank" rel="external">Wes Bos</a>.</p>
<p>I made the change recently and I am definitely not going back! Let me know what you guys think!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/images/12062015/Pimped_Out_Terminal.png" alt="Pimp out your terminal"><br>]]>
    
    </summary>
    
      <category term="ZSH" scheme="http://takeradi.github.io/tags/ZSH/"/>
    
      <category term="bash" scheme="http://takeradi.github.io/tags/bash/"/>
    
      <category term="iTerm" scheme="http://takeradi.github.io/tags/iTerm/"/>
    
      <category term="Terminal" scheme="http://takeradi.github.io/categories/Terminal/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Must Have Atom Packages]]></title>
    <link href="http://takeradi.github.io/2015/12/04/Atom-Packages/"/>
    <id>http://takeradi.github.io/2015/12/04/Atom-Packages/</id>
    <published>2015-12-05T04:30:44.000Z</published>
    <updated>2015-12-06T18:39:07.000Z</updated>
    <content type="html"><![CDATA[<p>There are a lot of text editors out there. Sublime Text, Atom, Brackets, Visual Studio Code. <a href="https://atom.io/" target="_blank" rel="external">Atom</a> is one of the best and it hands down my favorite!</p>
<p>Atom is an open source, platform independent text editor built by GitHub. It has an amazing ecosystem of packages which greatly extend the capabilities. Packages are super simple to install using the in-built atom package manager - <code>apm</code>. And did I mention that its free? Yes, its free!</p>
<p>Atom ships with a minimal set of packages. Here are a few packages that you must download to code like a pro:<br><a id="more"></a></p>
<ol>
<li><p><a href="https://atom.io/packages/emmet" target="_blank" rel="external">Emmet</a>:<br>Emmet is a plugin that should be installed, irrespective of the text editor/IDE you use. It makes writing HTML/CSS/SASS/LESS so much easier and faster. The syntax is pretty intuitive and very easy to catch on. Here’s the official <a href="http://docs.emmet.io/cheat-sheet/" target="_blank" rel="external">Emmet cheat sheet</a>. A must have package!</p>
</li>
<li><p><a href="https://atom.io/packages/pigments" target="_blank" rel="external">Pigments</a>:<br>I feel that managing CSS is a pain in the ass. Trying to visualize color codes just adds to that. Pigments displays the colors in your project files and give you a good idea of what’s its going to look like.</p>
</li>
<li><p><a href="https://atom.io/packages/minimap" target="_blank" rel="external">Minimap</a>:<br>Minimap displays a mini preview of your file on the right/left hand side of your editor. This one is ripped off from Sublime Text. Useful though!</p>
</li>
<li><p><a href="https://atom.io/packages/file-icons" target="_blank" rel="external">File Icons</a>:<br>File Icons improves the visual appearance of your project. It assigns file icons to different types of files to improve visual appearance.</p>
</li>
<li><p><a href="https://atom.io/packages/atom-beautify" target="_blank" rel="external">Beautify</a>:<br>This package beautifies the code that you have written. It corrects the indentation and the spacing. This package also supports multiple languages.</p>
</li>
<li><p><a href="https://atom.io/packages/atom-live-server" target="_blank" rel="external">Live Server</a>:<br>For me, this is by far the most useful plugin for web development. It saves me from refreshing the browser 100 times to see the output. Again, a must have package!</p>
</li>
<li><p><a href="https://atom.io/packages/atom-csscomb" target="_blank" rel="external">CSS Comb</a>:<br>This package sorts the CSS properties in a CSS/SASS/LESS file. Pretty famous among clean coders!</p>
</li>
<li><p><a href="https://atom.io/packages/merge-conflicts" target="_blank" rel="external">Merge Conflict</a>:<br>This package resolves git merge conflicts through Atom. I wonder why GitHub didn’t ship this plugin with Atom in the first place.</p>
</li>
<li><p><a href="https://atom.io/packages/linter" target="_blank" rel="external">Linter</a>:<br>A basic linter for your javascript files. There are many other linters available. Pick what you like the most.</p>
</li>
<li><p><a href="https://atom.io/packages/activate-power-mode" target="_blank" rel="external">Activate Power Mode</a>:<br>This is a fun one! Sometimes, only activating power mode can save you. This package was made for times like that. Activate power mode and code your problems away! :D</p>
</li>
</ol>
<p>Atom has lots of other useful packages. It sucks though that its integration with Git is not that great. Weird right? Made by GitHub :-/ Lets hope that they decide to solve that issue in their next update.</p>
<p>Let me know which Atom packages you like the most!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>There are a lot of text editors out there. Sublime Text, Atom, Brackets, Visual Studio Code. <a href="https://atom.io/">Atom</a> is one of the best and it hands down my favorite!</p>
<p>Atom is an open source, platform independent text editor built by GitHub. It has an amazing ecosystem of packages which greatly extend the capabilities. Packages are super simple to install using the in-built atom package manager - <code>apm</code>. And did I mention that its free? Yes, its free!</p>
<p>Atom ships with a minimal set of packages. Here are a few packages that you must download to code like a pro:<br>]]>
    
    </summary>
    
      <category term="Atom" scheme="http://takeradi.github.io/tags/Atom/"/>
    
      <category term="Text Editors" scheme="http://takeradi.github.io/categories/Text-Editors/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Multiple Git accounts on one PC]]></title>
    <link href="http://takeradi.github.io/2015/12/04/Multiple-Git-accounts-on-one-PC/"/>
    <id>http://takeradi.github.io/2015/12/04/Multiple-Git-accounts-on-one-PC/</id>
    <published>2015-12-04T20:41:19.000Z</published>
    <updated>2015-12-06T18:33:13.000Z</updated>
    <content type="html"><![CDATA[<p>What do you when you have to manage multiple Git accounts on the same PC? I face the same situation for managing my work and personal Git accounts. Github recommends <a href="https://help.github.com/articles/merging-multiple-user-accounts/" target="_blank" rel="external">merging both the accounts</a> and managing all your repos from one account.</p>
<p>What if you still want to manage them seperately?<br><a id="more"></a><br>You could follow these steps:</p>
<ol>
<li><p>Set up one of the accounts (the more frequently used one) with the global config. Refer to this <a href="https://help.github.com/articles/set-up-git/" target="_blank" rel="external">Github documentation</a>. This will save you the pain of authenticating every time you want to commit something.</p>
</li>
<li><p>For your second account, override the global config by a local one every time you create a repo. While this might be a bit longer (2 extra commands for god’s sake!), it saves you from merging both the accounts and helps you manage both the accounts in a cleaner fashion. Following are the steps to override the global config by a local one:</p>
 <figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog -- master± &gt; git config user<span class="class">.name</span> takeradi</span><br><span class="line">✝  ~/takeradi/blog -- master± &gt; git config user<span class="class">.email</span> sampleemail@sampleemail.com</span><br></pre></td></tr></table></figure>
<p> <em>Note: The above steps should be performed inside the newly created repo before committing/pushing anything to your Git remote repo.</em></p>
</li>
</ol>
<p>Hope this helps!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>What do you when you have to manage multiple Git accounts on the same PC? I face the same situation for managing my work and personal Git accounts. Github recommends <a href="https://help.github.com/articles/merging-multiple-user-accounts/">merging both the accounts</a> and managing all your repos from one account.</p>
<p>What if you still want to manage them seperately?<br>]]>
    
    </summary>
    
      <category term="Git" scheme="http://takeradi.github.io/tags/Git/"/>
    
      <category term="Version Control" scheme="http://takeradi.github.io/categories/Version-Control/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Git Submodules]]></title>
    <link href="http://takeradi.github.io/2015/12/04/Git-Submodules/"/>
    <id>http://takeradi.github.io/2015/12/04/Git-Submodules/</id>
    <published>2015-12-04T16:26:41.000Z</published>
    <updated>2015-12-06T19:00:09.000Z</updated>
    <content type="html"><![CDATA[<p>This post aims to ease the pain that one might feel while trying to understand <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules" target="_blank" rel="external">Git Submodules</a>. It is an advanced Git topic but it really isn’t that difficult to understand.</p>
<p>I will try to demonstrate Git Submodules through an example. Imagine that you have to create a project and use a third party library inside that project. You also want to customize the 3rd party library according to your needs. How do you approach this problem? Using Git Submodules! Let’s look at the example:</p>
<a id="more"></a>
<p><hr></p>
<h1 id="Initialize_your_Git_Repository:">Initialize your Git Repository:<p></p></h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">✝  <span class="regexp">~/takeradi/</span>blog &gt; git init</span><br><span class="line">Initialized empty Git repository <span class="keyword">in</span> <span class="regexp">/Users/</span>adityab<span class="regexp">/takeradi/</span>blog<span class="regexp">/.git/</span></span><br></pre></td></tr></table></figure>
<p></p><p></p>
<p><hr></p>
<h1 id="Fork_the_3rd_party_repo_to_your_GitHub_account:">Fork the 3rd party repo to your GitHub account:<p></p></h1><p>The reason why I chose to fork the 3rd party repo to my own Github account is because I didn’t have permission to push to the 3rd party vendor’s repo. Who in their right state of mind would give me or you the permission to do that! And I wanted to customize the library according to my needs. Many stackoverflow users have faced this <a href="http://stackoverflow.com/questions/12309884/make-changes-to-a-git-submodule-and-then-add-those-into-my-main-project" target="_blank" rel="external">issue</a> and I have found this to be the best way to customize the library to my needs. If in the future, I want to sync the updates from the 3rd party vendor into my fork, I will just have to perform these <a href="https://help.github.com/articles/syncing-a-fork/" target="_blank" rel="external">steps</a> mentioned on GitHub.</p>
<p><hr></p>
<h1 id="Add_the_forked_module_as_a_submodule_into_my_main_project:">Add the forked module as a submodule into my main project:<p></p></h1><figure class="highlight groovy"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">✝  <span class="regexp">~/takeradi/</span>blog -- master± &gt; git submodule add <span class="string">https:</span><span class="comment">//github.com/takeradi/hexo-theme-next.git themes/next</span></span><br><span class="line">Cloning into <span class="string">'themes/next'</span>...</span><br><span class="line"><span class="string">remote:</span> Counting <span class="string">objects:</span> <span class="number">4802</span>, done.</span><br><span class="line"><span class="string">remote:</span> Total <span class="number">4802</span> (delta <span class="number">3</span>), reused <span class="number">3</span> (delta <span class="number">3</span>), pack-reused <span class="number">4798</span></span><br><span class="line">Receiving <span class="string">objects:</span> <span class="number">100</span>% (<span class="number">4802</span><span class="regexp">/4802), 9.69 MiB | 1.77 MiB/</span>s, done.</span><br><span class="line">Resolving <span class="string">deltas:</span> <span class="number">100</span>% (<span class="number">2496</span>/<span class="number">2496</span>), done.</span><br><span class="line">Checking connectivity... done.</span><br></pre></td></tr></table></figure>
<p>

</p><p><hr></p>
<h1 id="Customize_the_submodule:">Customize the submodule:<p></p></h1><h2 id="-_Make_the_changes_and_check_git_status:"><em>- Make the changes and check git status:</em></h2><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog/themes/next -- master± &gt; git status</span><br><span class="line">On branch master</span><br><span class="line">Your branch is up-to-date with <span class="string">'origin/master'</span>.</span><br><span class="line">Changes not staged <span class="keyword">for</span> commit:</span><br><span class="line"> (use <span class="string">"git add/rm &lt;file&gt;..."</span> to update what will be committed)</span><br><span class="line"> (use <span class="string">"git checkout -- &lt;file&gt;..."</span> to discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">   deleted:    languages/de<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/fr-FR<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/pt<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/ru<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/zh-Hans<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/zh-hk<span class="class">.yml</span></span><br><span class="line">   deleted:    languages/zh-tw.yml</span><br></pre></td></tr></table></figure>
<h2 id="-_Stage,_Commit,_and_Push_the_submodule_to_its_master:"><em>- Stage, Commit, and Push the submodule to its master:</em></h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog/themes/next <span class="comment">-- master± &gt; git add .</span></span><br><span class="line">✝  ~/takeradi/blog/themes/next <span class="comment">-- master± &gt; git commit -m "Removed language support"</span></span><br><span class="line">[master 32ca4fa] Removed language support</span><br><span class="line">7 files changed, 493 deletions(-)</span><br><span class="line"><span class="operator"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/de.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/fr-FR.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/pt.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/ru.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/zh-Hans.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/zh-hk.yml</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">mode</span> <span class="number">100644</span> languages/zh-tw.yml</span><br><span class="line">✝  ~/takeradi/blog/themes/<span class="keyword">next</span> <span class="comment">-- master &gt; git push origin master</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: takeradi</span><br><span class="line"><span class="keyword">Password</span> <span class="keyword">for</span> <span class="string">'https://takeradi@github.com'</span>:</span><br><span class="line">Counting objects: <span class="number">3</span>, done.</span><br><span class="line">Delta compression <span class="keyword">using</span> up <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">3</span>/<span class="number">3</span>), <span class="number">318</span> <span class="keyword">bytes</span> | <span class="number">0</span> <span class="keyword">bytes</span>/s, done.</span><br><span class="line">Total <span class="number">3</span> (delta <span class="number">1</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line"><span class="keyword">To</span> https://github.com/takeradi/hexo-theme-<span class="keyword">next</span>.git</span><br><span class="line">  <span class="number">0881139.</span><span class="number">.32</span>ca4fa  <span class="keyword">master</span> -&gt; <span class="keyword">master</span></span></span><br></pre></td></tr></table></figure>
<p>

</p><p><hr></p>
<h1 id="Check_the_status_of_the_main_project:">Check the status of the main project:<p></p></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog <span class="comment">-- master± &gt; git status</span></span><br><span class="line">On branch master</span><br><span class="line"></span><br><span class="line">Initial <span class="operator"><span class="keyword">commit</span></span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">to</span> be committed:</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git rm --cached &lt;file&gt;..."</span> <span class="keyword">to</span> unstage)</span><br><span class="line"></span><br><span class="line">   <span class="keyword">new</span> <span class="keyword">file</span>:   .gitmodules</span><br><span class="line">   <span class="keyword">new</span> <span class="keyword">file</span>:   themes/<span class="keyword">next</span></span><br><span class="line"></span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> <span class="keyword">commit</span>:</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">update</span> what will be committed)</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working <span class="keyword">directory</span>)</span><br><span class="line"></span><br><span class="line">   modified:   themes/<span class="keyword">next</span> (<span class="keyword">new</span> commits)</span><br><span class="line"></span><br><span class="line">Untracked files:</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> <span class="keyword">include</span> <span class="keyword">in</span> what will be committed)</span><br><span class="line"></span><br><span class="line">   .gitignore</span><br><span class="line">   _config.yml</span><br><span class="line">   <span class="keyword">package</span>.<span class="keyword">json</span></span><br><span class="line">   scaffolds/</span><br><span class="line">   <span class="keyword">source</span>/</span></span><br></pre></td></tr></table></figure>
<p>If you notice carefully, you will see two things:</p>
<ol>
<li><p>a new file named <code>.gitmodules</code> has been created. This gets created when you add a submodule to your main project. If you view that file, you will see the references to the submodule:</p>
 <figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog -- master± &gt; <span class="keyword">cat</span> .gitmodules</span><br><span class="line">[submodule <span class="string">"themes/next"</span>]</span><br><span class="line">   path = themes/<span class="keyword">next</span></span><br><span class="line">   url = http<span class="variable">s:</span>//github.<span class="keyword">com</span>/takeradi/hexo-theme-<span class="keyword">next</span>.git</span><br></pre></td></tr></table></figure>
</li>
<li><p>The <code>new commits</code> message which indicates that a submodule has been created and needs to be committed.</p>
</li>
</ol>
<p><hr></p>
<h1 id="Stage,_Commit,_and_Push_the_main_project_to_master:">Stage, Commit, and Push the main project to master:<p></p></h1><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog <span class="comment">-- master± &gt; git add .</span></span><br><span class="line"> ✝  ~/takeradi/blog <span class="comment">-- master± &gt; git commit -m "Initial commit of the blog"</span></span><br><span class="line">[master (root-<span class="operator"><span class="keyword">commit</span>) c17cc19] <span class="keyword">Initial</span> <span class="keyword">commit</span> <span class="keyword">of</span> the blog</span><br><span class="line"> <span class="number">10</span> files <span class="keyword">changed</span>, <span class="number">257</span> insertions(+)</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> .gitignore</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> .gitmodules</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> _config.yml</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> <span class="keyword">package</span>.<span class="keyword">json</span></span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> scaffolds/draft.md</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> scaffolds/page.md</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> scaffolds/post.md</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> <span class="keyword">source</span>/_posts/Git-Submodules.md</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">100644</span> <span class="keyword">source</span>/_posts/hello-world.md</span><br><span class="line"> <span class="keyword">create</span> <span class="keyword">mode</span> <span class="number">160000</span> themes/<span class="keyword">next</span></span><br><span class="line"> ✝  ~/takeradi/blog <span class="comment">-- master &gt; git remote add origin https://github.com/takeradi/takeradi-blog.git</span></span><br><span class="line"> ✝  ~/takeradi/blog <span class="comment">-- master &gt; git push -u origin master</span></span><br><span class="line">Username <span class="keyword">for</span> <span class="string">'https://github.com'</span>: takeradi</span><br><span class="line"><span class="keyword">Password</span> <span class="keyword">for</span> <span class="string">'https://takeradi@github.com'</span>:</span><br><span class="line">Counting objects: <span class="number">15</span>, done.</span><br><span class="line">Delta compression <span class="keyword">using</span> up <span class="keyword">to</span> <span class="number">8</span> threads.</span><br><span class="line">Compressing objects: <span class="number">100</span>% (<span class="number">10</span>/<span class="number">10</span>), done.</span><br><span class="line">Writing objects: <span class="number">100</span>% (<span class="number">15</span>/<span class="number">15</span>), <span class="number">3.77</span> KiB | <span class="number">0</span> <span class="keyword">bytes</span>/s, done.</span><br><span class="line">Total <span class="number">15</span> (delta <span class="number">0</span>), reused <span class="number">0</span> (delta <span class="number">0</span>)</span><br><span class="line"><span class="keyword">To</span> https://github.com/takeradi/takeradi-blog.git</span><br><span class="line"> * [<span class="keyword">new</span> branch]      <span class="keyword">master</span> -&gt; <span class="keyword">master</span></span><br><span class="line">Branch <span class="keyword">master</span> <span class="keyword">set</span> up <span class="keyword">to</span> track remote branch <span class="keyword">master</span> <span class="keyword">from</span> origin.</span></span><br></pre></td></tr></table></figure>
<p>If you look at the GitHub repository you will see the hash of the commit linking to the commit of the forked repo that the submodule links to. Something like this:</p>
<p>The above screenshot shows <code>32ca4fa</code> as the hash of the commit which is referenced in the forked repo. Clicking on it will take you to that commit.</p>
<p><img src="/images/12042015/Git_Submodule_Hash.png" alt="Submodule hash link"></p>
<p>In fact, if you dig deeper, you will notice that the commit that was pushed from the main project was in fact the complete hash of the commit in the forked repo as shown below:</p>
<p><img src="/images/12042015/Git_Hash_Link.png" alt="Complete hash of the forked repo"></p>
<p><hr></p>
<h1 id="Customizing_the_library_further:">Customizing the library further:<p></p></h1><p>If you want to continue customizing the 3rd party library, you just have to follow the same steps again:</p>
<ol>
<li>Stage, commit and push changes in the library</li>
<li><p>Change directory to the main project and check git status. You will see something like this:</p>
 <figure class="highlight vhdl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">✝  ~/takeradi/blog <span class="comment">-- master± &gt; git status</span></span><br><span class="line"><span class="keyword">On</span> branch master</span><br><span class="line">Your branch <span class="keyword">is</span> up-<span class="keyword">to</span>-date <span class="keyword">with</span> <span class="attribute">'origin</span>/master'.</span><br><span class="line">Changes <span class="keyword">not</span> staged <span class="keyword">for</span> commit:</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git add &lt;file&gt;..."</span> <span class="keyword">to</span> update what will be committed)</span><br><span class="line"> (<span class="keyword">use</span> <span class="string">"git checkout -- &lt;file&gt;..."</span> <span class="keyword">to</span> discard changes <span class="keyword">in</span> working directory)</span><br><span class="line"></span><br><span class="line">   modified:   source/_posts/hello-world.md</span><br><span class="line">   modified:   themes/<span class="keyword">next</span> (<span class="keyword">new</span> commits)</span><br><span class="line"></span><br><span class="line">no changes added <span class="keyword">to</span> commit (<span class="keyword">use</span> <span class="string">"git add"</span> <span class="keyword">and</span>/<span class="keyword">or</span> <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure>
<p> The <code>new commits</code> message now indicates that the submodule was updated. This updates the hash linking the submodule in your main project to point to the commit which is referenced on the forked module as shown below:</p>
<p> <img src="/images/12042015/Git_Hash_Update.png" alt="Git Hash Update"></p>
</li>
<li><p>Stage, commit and push these changes in the main project.</p>
</li>
</ol>
<p>Simple!</p>
<p><hr></p>
<h1 id="Closing_Thoughts:">Closing Thoughts:<p></p></h1><p>Thats it! It sucks that you have to jump through so many hoops to do this but IMHO, this is the best way (atleast that I know of). Forking enables you to sync and consume the upstream changes at a later stage of your development. Forking also enables you to customize and keep those changes on your repo for use into other projects.</p>
<p>Also, I have heard that there is a better way to this but its currently in the works. Its called <a href="https://github.com/apenwarr/git-subtree" target="_blank" rel="external">git-subtree</a> and it has been merged to the main <a href="https://github.com/git/git/tree/master/contrib/subtree" target="_blank" rel="external">Git</a> repo. As soon as I get a hang of git-subtree, I will post an alternative way complete this whole process. Let me know what you guys think!</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>This post aims to ease the pain that one might feel while trying to understand <a href="https://git-scm.com/book/en/v2/Git-Tools-Submodules">Git Submodules</a>. It is an advanced Git topic but it really isn’t that difficult to understand.</p>
<p>I will try to demonstrate Git Submodules through an example. Imagine that you have to create a project and use a third party library inside that project. You also want to customize the 3rd party library according to your needs. How do you approach this problem? Using Git Submodules! Let’s look at the example:</p>]]>
    
    </summary>
    
      <category term="Git" scheme="http://takeradi.github.io/tags/Git/"/>
    
      <category term="Version Control" scheme="http://takeradi.github.io/categories/Version-Control/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://takeradi.github.io/2015/12/04/hello-world/"/>
    <id>http://takeradi.github.io/2015/12/04/hello-world/</id>
    <published>2015-12-04T16:20:41.000Z</published>
    <updated>2015-12-05T05:44:27.000Z</updated>
    <content type="html"><![CDATA[<p>I created this blog using <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>. Hexo is a static site generator. It enables you to build a simple website in under 5 mins. Since I am so impressed by Hexo, I am going to let their intro be my first post. Here goes!</p>
<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.<br><a id="more"></a></p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>I created this blog using <a href="http://hexo.io/">Hexo</a>. Hexo is a static site generator. It enables you to build a simple website in under 5 mins. Since I am so impressed by Hexo, I am going to let their intro be my first post. Here goes!</p>
<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://takeradi.github.io/tags/Hexo/"/>
    
      <category term="General" scheme="http://takeradi.github.io/categories/General/"/>
    
  </entry>
  
</feed>
